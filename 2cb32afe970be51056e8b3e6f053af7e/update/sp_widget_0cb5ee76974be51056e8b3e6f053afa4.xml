<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function(spUtil, spModal, $timeout) {
	/* widget controller */
	var c = this;
	c.regex = "^(http[s]?:\/\/){1}(www\.){0,1}([a-zA-Z0-9\-]+)\.([a-zA-Z0-9\-]+)(\.){0,1}(.+)$";
	c.isMobile = spUtil.isMobile();
	c.showPassword = false;
	c.passInputType = 'password';
	c.copyMsg = '';
	c.popoverOpenReq = false;
	c.popoverOpenResp = false;

	// c.data.headersNew = [{
	// 	"key" : "Content-Type",
	// 	"value" : "application/json",
	// 	"editingKey" : false,
	// 	"editingValue" : false
	// }, {
	// 	"key" : "Accept",
	// 	"value" : "application/json",
	// 	"editingKey" : false,
	// 	"editingValue" : false
	// }];

	// if(c.options.preloadsaveddata) {
	// 	c.data.endpointUrl = c.options.endpointurl;
	// 	c.data.headersNew = JSON.parse(c.options.headersnew);
	// }

	c.showHidePassword = function() {
		c.showPassword = !c.showPassword;
		c.passInputType = (c.showPassword) ? 'text' : 'password';
	};

	c.startEditing = function(item, elem, event) {

		if (elem == 'key')
			item.editingKey = true;
		else if (elem == 'value')
			item.editingValue = true;

		var element = angular.element(event.currentTarget);
		var parentTD = angular.element(element).parent();
		$timeout(function(elem123) {
			//console.log(elem123.children()[0].focus());
		}, 50, true, parentTD);

	};

	c.doneEditing = function(item, elem, $event) {
		if (elem == 'key')
			item.editingKey = false;
		else if (elem == 'value')
			item.editingValue = false;
	};

	c.submit = function() {

		if (c.data.endpointUrl) {
			var endpointUrl = c.data.endpointUrl;
			var headersObj = {};
			c.data.headersNew.forEach(function(header) {
				headersObj[header.key] = header.value;
			});

			if (c.authType == 'basic') {
				headersObj.Authorization = 'Basic ' + btoa(c.username + ':' + c.password);
			} else if (c.authType == 'bearer') {
				headersObj.Authorization = 'Bearer ' + c.token;
			} else if (c.authType == 'apikey-header') {
				headersObj[c.keyName] = c.keyValue;
			} else if (c.authType == 'apikey-queryparams') {
				var urlObj = new URL(endpointUrl);
				urlObj.searchParams.append(c.keyName, c.keyValue);
				endpointUrl = urlObj.href;
			} else if (c.authType == 'none') {
				//do nothing
			}



			c.server.get({
				action: 'sendMessage',
				method: c.data.methodName,
				endpoint: endpointUrl,
				headers: headersObj,
				body: c.data.requestBody.value
			}).then(function(resp) {
				c.data.responseBody.value = resp.data.responseBody;
				c.data.statusFlag = resp.data.statusFlag;
				c.data.httpStatus = resp.data.httpStatus;
				spUtil.scrollTo('#response-text', 1000);
			});
		}
	};

	c.addHeader = function() {

		if (c.headerKey && c.headerValue) {

			var found = false;
			for (i = 0; i < c.data.headersNew.length; i++) {
				if (c.data.headersNew[i].key == c.headerKey) {
					found = true;
					break;
				}
			}

			if (!found) {
				// Push the new item to the headers array
				c.data.headersNew.push({
					"key": c.headerKey,
					"value": c.headerValue,
					"editingKey": false,
					"editingValue": false
				});

				//Clear the TextBoxes.
				c.headerKey = "";
				c.headerValue = "";
			}
		}

	};

	c.removeHeader = function(item, index) {
		//Find the record using Index from Array.

		//spModal.confirm("Do you want to delete: " + item.key + " ?").then(function(confirmed) {
		//	if(confirmed) {
		//c.headerKey = key;
		//c.headerValue = c.data.headers[key];

		//Remove the item from Array using Index.
		c.data.headersNew.splice(index, 1);
		//	}
		//});
	};

	c.copy = function(str, source) {
		if (str) {
			navigator.clipboard.writeText(str).then(function(resp) {
				$timeout(function() {
					c.copyMsg = 'Copied to clipboard!';
					c.setPopoverFlag(source, true);
					$timeout(function() {
						c.setPopoverFlag(source, false);
					}, 3000);
				});
			})
		} else {
			c.copyMsg = 'Nothing to copy!';
			c.setPopoverFlag(source, true);

			$timeout(function() {
				c.setPopoverFlag(source, false);
			}, 3000);
		}
	};

	c.setPopoverFlag = function(source, flag) {
		if (source == 'req') {
			c.popoverOpenReq = flag;
		} else if (source == 'resp') {
			c.popoverOpenResp = flag;
		}
	};

	c.openJCModal = function(respObj) {
		spModal.confirm("Response Body will be sent to external site to render graphical view.<br>Do you want to proceed?").then(function(confirmed) {
			if (confirmed) {
				spModal.open({
					title: 'Diagram View',
					widget: 'json_crack',
					widgetInput: {
						'obj': respObj
					},
					size: 'lg',
					buttons: [{
						label: '${Ok}',
						primary: true
					}],
					headerStyle: {
						'background': '#00539C',
						'color': 'white',
						'border-top-left-radius': '5px',
						'border-top-right-radius': '5px'
					}
				}).then(function(answer) {

				});

				$timeout(function() {
					angular.element('button.close.pull-right').remove();
				}, 800);
			}
		});

		$timeout(function() {
			angular.element('button.close.pull-right').remove();
		}, 100);

	};

};]]></client_script>
        <controller_as>c</controller_as>
        <css>*:not(.glyphicon) {&#13;
  font-family: 'Ubuntu Mono', monospace;&#13;
}&#13;
&#13;
.ig-elem1, .ig-elem2, .ig-elem4 {&#13;
  height: 4rem;&#13;
}&#13;
&#13;
.glyphicon-send {&#13;
  font-size: large;&#13;
}&#13;
&#13;
.btn[disabled] {&#13;
  opacity: 1;&#13;
}&#13;
&#13;
.btn-pnl &gt; a {&#13;
  color: inherit;&#13;
}&#13;
&#13;
.glyphicon-stats {&#13;
  margin-right: 10px;&#13;
}&#13;
&#13;
.full-width {&#13;
  width: 100%;&#13;
}&#13;
&#13;
.my-group .ig-elem1 {&#13;
  width: 25%;&#13;
  background-color: $brand-primary;&#13;
  color: white;&#13;
}&#13;
&#13;
.vertical-middle {&#13;
  vertical-align: middle;&#13;
}&#13;
&#13;
.no-bottom-margin {&#13;
  margin-bottom: 0px;&#13;
}&#13;
&#13;
.my-group .ig-elem2 {&#13;
  width: 75%;&#13;
}&#13;
&#13;
.no-left-right-padding {&#13;
  padding-left: 0;&#13;
  padding-right: 0;&#13;
}&#13;
&#13;
.panel-title {&#13;
  font-weight: bold;&#13;
  font-size: 1.7rem;&#13;
}&#13;
&#13;
.bg-edit {&#13;
  background: #FFF4A3;&#13;
}&#13;
&#13;
textarea {&#13;
  height: 161px;&#13;
  width: 100%;&#13;
  -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */&#13;
  -moz-box-sizing: border-box;    /* Firefox, other Gecko */&#13;
  box-sizing: border-box;         /* Opera/IE 8+ */&#13;
  border: none;&#13;
  resize: none;&#13;
}&#13;
&#13;
.pop-class {&#13;
  background: white;&#13;
  color: $brand-primary;&#13;
}&#13;
&#13;
&#13;
/* Small devices (tablets, 768px and up) */&#13;
@media (max-width: 991px) {&#13;
  #request-body, #response-text,&#13;
  #reqHeader-panel, #auth-panel {&#13;
    padding-left: 0;&#13;
    padding-right: 0;&#13;
  }&#13;
}&#13;
&#13;
/* Medium devices (desktops, 992px and up) */&#13;
@media (min-width: 992px) {&#13;
  #request-body, #auth-panel {&#13;
    padding-left: 0;&#13;
  }&#13;
&#13;
  #response-text, #reqHeader-panel {&#13;
    padding-right: 0;&#13;
  }&#13;
&#13;
  #reqHeader-panel &gt; .panel &gt; .panel-body {&#13;
    height: 200px;&#13;
    overflow-y: auto;&#13;
  }&#13;
&#13;
  #auth-panel &gt; .panel &gt; .panel-body {&#13;
    height: 255px;&#13;
    overflow-y: auto;&#13;
    display: flex;&#13;
    flex-direction: column;&#13;
  }&#13;
&#13;
  #no-auth-group {&#13;
    height: 100%;&#13;
    display: flex;&#13;
    flex-direction: row;&#13;
    align-items: center;&#13;
    justify-content: center;&#13;
  }&#13;
&#13;
}&#13;
&#13;
.no-padding {&#13;
  padding: 0;&#13;
}&#13;
&#13;
.glyphicon-trash {&#13;
  color: red;&#13;
}&#13;
&#13;
td&#13;
{&#13;
  max-width: 100px;&#13;
  overflow: hidden;&#13;
  text-overflow: ellipsis;&#13;
  white-space: normal;&#13;
  overflow-wrap: break-word;&#13;
}&#13;
&#13;
.full-span {&#13;
  display: block;&#13;
}&#13;
&#13;
.editable-input {&#13;
  width: 100%;&#13;
  border: none;&#13;
  background: #FFF4A3;&#13;
}&#13;
&#13;
.editable-input:focus {&#13;
  box-shadow: none;&#13;
}&#13;
&#13;
.iframe-preview {&#13;
  width: 100%;&#13;
  height: 100%;&#13;
  padding-top: 5px;&#13;
  border: none;&#13;
}&#13;
&#13;
.footer-height {&#13;
  height: 20px;&#13;
}&#13;
&#13;
&#13;
/* Scrollbar CSS */&#13;
/* width */&#13;
::-webkit-scrollbar {&#13;
  width: 8px;&#13;
&#13;
}&#13;
&#13;
/* Track */&#13;
::-webkit-scrollbar-track {&#13;
  background: #f1f1f1;&#13;
}&#13;
&#13;
/* Handle */&#13;
::-webkit-scrollbar-thumb {&#13;
  background: $brand-primary;&#13;
  border-radius: 5px; &#13;
}&#13;
&#13;
/* Handle on hover */&#13;
::-webkit-scrollbar-thumb:hover {&#13;
  background: lighten($brand-primary, 10%);  &#13;
}&#13;
&#13;
&#13;
/* above each code section */&#13;
.minibar {&#13;
  padding: 2px;&#13;
&#13;
  .btn {&#13;
    border: none;&#13;
  }&#13;
}&#13;
&#13;
input[type=checkbox] {&#13;
  margin-right: .25em;&#13;
}&#13;
&#13;
.check {&#13;
  white-space: nowrap;&#13;
  margin-bottom: 0;&#13;
  margin-left: 1rem;&#13;
}&#13;
&#13;
.CodeMirror {&#13;
  border-radius: 0px 0px 5px 5px;&#13;
  border: none;&#13;
  height: 250px;&#13;
}&#13;
&#13;
.CodeMirror-hscrollbar {&#13;
  height: 8px;&#13;
}&#13;
&#13;
pre.CodeMirror-line {&#13;
  font-size: 14px !important;&#13;
}&#13;
&#13;
.animate {&#13;
  transition: 350ms flex-grow cubic-bezier(0.075, 0.820, 0.165, 1.000), 350ms padding cubic-bezier(0.075, 0.820, 0.165, 1.000), 350ms margin cubic-bezier(0.075, 0.820, 0.165, 1.000);&#13;
  -webkit-transition: 350ms flex-grow cubic-bezier(0.075, 0.820, 0.165, 1.000), 350ms padding cubic-bezier(0.075, 0.820, 0.165, 1.000), 350ms margin cubic-bezier(0.075, 0.820, 0.165, 1.000);&#13;
}&#13;
&#13;
&#13;
.relative {&#13;
  position: relative;&#13;
}&#13;
&#13;
.button-nav {&#13;
  .btn-group {&#13;
    margin-left: 0.5rem;&#13;
  }&#13;
&#13;
  button {&#13;
    min-width: 40px;&#13;
  }&#13;
}&#13;
&#13;
.doc {&#13;
  overflow: auto;&#13;
  width: 98%;&#13;
}&#13;
&#13;
.doc-icons {&#13;
  position: absolute;&#13;
  padding: 5px;&#13;
  right: 0px;&#13;
}&#13;
&#13;
.dropdown-icon {&#13;
  padding-right: 10px;&#13;
}&#13;
&#13;
.sp-dep {&#13;
  width: 200px;&#13;
}&#13;
&#13;
.read-only-message {&#13;
  text-align: center;&#13;
&#13;
  .alert {&#13;
    display: inline-block;&#13;
    margin-bottom: 10px;&#13;
  }&#13;
&#13;
}&#13;
&#13;
.cm-s-snc_readonly { background-color: #e6e8ea; color: #444444; }&#13;
&#13;
.cm-s-snc_readonly_readonly span.cm-meta { color: #FF1717; }&#13;
&#13;
.cm-s-snc_readonly span.cm-keyword { font-weight: bold; color: #7F0055; }&#13;
&#13;
.cm-s-snc_readonly span.cm-atom { color: #219; }&#13;
&#13;
.cm-s-snc_readonly span.cm-number { color: #164; }&#13;
&#13;
.cm-s-snc_readonly span.cm-def { color: #00f; }&#13;
&#13;
.cm-s-snc_readonly span.cm-variable { color: black; }&#13;
&#13;
.cm-s-snc_readonly span.cm-variable-2 { color: #0000C0; }&#13;
&#13;
.cm-s-snc_readonly span.cm-variable-3 { color: #0000C0; }&#13;
&#13;
.cm-s-snc_readonly span.cm-property { color: black; }&#13;
&#13;
.cm-s-snc_readonly span.cm-operator { color: black; }&#13;
&#13;
.cm-s-snc_readonly span.cm-comment { color: #3F7F5F; }&#13;
&#13;
.cm-s-snc_readonly span.cm-string { color: #2A00FF; }&#13;
&#13;
.cm-s-snc_readonly span.cm-string-2 { color: #f50; }&#13;
&#13;
.cm-s-snc_readonly span.cm-error { color: #f00; }&#13;
&#13;
.cm-s-snc_readonly span.cm-qualifier { color: #555; }&#13;
&#13;
.cm-s-snc_readonly span.cm-builtin { color: #30a; }&#13;
&#13;
.cm-s-snc_readonly span.cm-bracket { color: #cc7; }&#13;
&#13;
.cm-s-snc_readonly span.cm-tag { color: #170; }&#13;
&#13;
.cm-s-snc_readonly span.cm-attribute { color: #00c; }&#13;
&#13;
.cm-s-snc_readonly span.cm-link { color: #219; }&#13;
&#13;
.cm-s-snc_readonly .CodeMirror-matchingbracket {&#13;
  color: OrangeRed !important;;&#13;
}&#13;
&#13;
// readonly&#13;
[role="editor-container"][data-readonly="true"] {&#13;
  .CodeMirror {&#13;
    background-color: #F7F7F7 !important;&#13;
  }&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>mailman_widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Mailman Widget</name>
        <option_schema>[{"name":"methodname","section":"Data","label":"Method Name","type":"string"},&#13;
{"name":"endpointurl","section":"Data","label":"Endpoint URL","type":"string"},{"name":"preloadsaveddata","section":"Data","default_value":"false","label":"Preload Saved Data","type":"boolean"},{"name":"headersnew","section":"Data","label":"Headers","type":"string"},&#13;
{"name":"requestbody","section":"Data","label":"Request Body","type":"string"},&#13;
{"name":"responsebody","section":"Data","label":"Response Body","type":"string"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	if (!input) {
		data.headersNew = [{
			"key": "Content-Type",
			"value": "application/json",
			"editingKey": false,
			"editingValue": false
		}, {
			"key": "Accept",
			"value": "application/json",
			"editingKey": false,
			"editingValue": false
		}];

		data.responseBody = {
			"value": JSON.stringify({}, null, 4)
		};

		data.requestBody = {
			"value": JSON.stringify({}, null, 4)
		};
	} else {

		if (input.preloadsaveddata == 'true') {
			data.methodName = input.methodname;
			data.endpointUrl = input.endpointurl;
			data.headersNew = input.headersnew;
			data.requestBody = input.requestbody;
			data.responseBody = input.responsebody;
			data.statusFlag = input.statusflag;
			data.httpStatus = input.httpstatus;
		}
		// data.responseBody = {
		//     "value": JSON.stringify({}, null, 4)
		// };
	}

	if (input && input.action == 'sendMessage') {
		try {
			var r = new sn_ws.RESTMessageV2();
			r.setEndpoint(input.endpoint);
			r.setHttpMethod(input.method);
			for (var key in input.headers) {
				r.setRequestHeader(key, input.headers[key]);
			}

			if (input.body) {
				r.setRequestBody(input.body);
			}

			var response = r.execute();
			data.httpStatus = response.getStatusCode();

			if (data.httpStatus >= 200 && data.httpStatus <= 299)
				data.statusFlag = true;
			else
				data.statusFlag = false;

			try {
				data.responseBody = JSON.stringify(JSON.parse(response.getBody()), null, 4);
			} catch (e) {
				data.responseBody = response.getBody();
			}

		} catch (ex) {
			data.output = ex;
			gs.addErrorMessage(data.output);
		}
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-30 16:20:56</sys_created_on>
        <sys_id>0cb5ee76974be51056e8b3e6f053afa4</sys_id>
        <sys_mod_count>680</sys_mod_count>
        <sys_name>Mailman Widget</sys_name>
        <sys_package display_value="Mailman" source="x_792082_mailman">2cb32afe970be51056e8b3e6f053af7e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Mailman">2cb32afe970be51056e8b3e6f053af7e</sys_scope>
        <sys_update_name>sp_widget_0cb5ee76974be51056e8b3e6f053afa4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-21 18:22:08</sys_updated_on>
        <template><![CDATA[<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Ubuntu+Mono&display=swap" rel="stylesheet">

<div class="container-fluid">

  <div class="row" id="endpoint-input">
    <form name="inputForm">
      <div class="col-xs-12 form-group no-left-right-padding">
        <div class="input-group my-group">
          <select class="input-group-addon bg-success selectpicker form-control ig-elem1" ng-init="c.data.methodName = c.data.methodName || 'GET'" ng-model="c.data.methodName" >
            <option value="GET">GET</option>
            <option value="POST">POST</option>
            <option value="PUT">PUT</option>
            <option value="PATCH">PATCH</option>
            <option value="DELETE">DELETE</option>
          </select>
          <input id="urlInput" name="urlInput" type="text" class="form-control ig-elem2" placeholder="Enter endpoint URL" ng-model="c.data.endpointUrl" ng-pattern="c.regex" ng-required="true">
          <span class="input-group-btn ig-elem3">
            <button class="btn ig-elem4" ng-class="{'btn-default': !inputForm.urlInput.$valid, 'btn-primary': inputForm.urlInput.$valid}" ng-disabled="!inputForm.urlInput.$valid" type="submit" ng-click="c.submit()">
              <span class="glyphicon glyphicon-send" aria-hidden="true"></span>
            </button>
          </span>
        </div>
      </div>
    </form>
  </div>

  <div class="row" id="headers">

    <div class="col-md-6 col-sm-12 col-xs-12" id="auth-panel">
      <div class="panel panel-primary">
        <div class="panel-heading">
          <h3 class="panel-title">Authorization</h3>
        </div>
        <div class="panel-body">
          <div class="form-group">
            <label for="authType">Type</label>
            <select class="form-control" id="authType" ng-init="c.authType='none'" ng-model="c.authType">
              <option value="none">No Auth</option>
              <option value="basic">Basic Auth</option>
              <option value="bearer">Bearer</option>
              <option value="apikey-header">API Key (in Header)</option>
              <option value="apikey-queryparams">API Key (in Query Params)</option>
            </select>
          </div>

          <div id="no-auth-group" class="text-center" ng-if="c.authType=='none'">
            ${No authorization required.}
          </div>

          <div id="basic-auth-group" ng-if="c.authType=='basic'">
            <div class="form-group">
              <label for="username">Username</label>
              <input type="text" class="form-control" id="username" ng-model="c.username">
            </div>

            <div class="form-group">
              <label for="pwd">Password</label>
              <div class="input-group">
                <input type="{{c.passInputType}}" class="form-control" id="pwd" ng-model="c.password">
                <span class="input-group-btn">
                  <button class="btn btn-default" type="button" ng-click="c.showHidePassword()">
                    <span class="glyphicon" ng-class="{'glyphicon-eye-open': c.showPassword, 'glyphicon-eye-close': !c.showPassword}"></span>
                  </button>
                </span>
              </div>
            </div>
          </div>

          <div id="bearer-auth-group" ng-if="c.authType=='bearer'">
            <div class="form-group">
              <label for="token">Token</label>
              <div class="input-group">
                <input type="{{c.passInputType}}" class="form-control" id="token" ng-model="c.token">
                <span class="input-group-btn">
                  <button class="btn btn-default" type="button" ng-click="c.showHidePassword()">
                    <span class="glyphicon" ng-class="{'glyphicon-eye-open': c.showPassword, 'glyphicon-eye-close': !c.showPassword}"></span>
                  </button>
                </span>
              </div>
            </div>
          </div>

          <div id="apikey-auth-group" ng-if="c.authType=='apikey-header' || c.authType=='apikey-queryparams'">
            <div class="form-group">
              <label for="keyName">Key</label>
              <input type="text" class="form-control" id="keyName" ng-model="c.keyName">
            </div>
            <div class="form-group">
              <label for="keyValue">Value</label>
              <div class="input-group">
                <input type="{{c.passInputType}}" class="form-control" id="keyValue" ng-model="c.keyValue">
                <span class="input-group-btn">
                  <button class="btn btn-default" type="button" ng-click="c.showHidePassword()">
                    <span class="glyphicon" ng-class="{'glyphicon-eye-open': c.showPassword, 'glyphicon-eye-close': !c.showPassword}"></span>
                  </button>
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="col-md-6 col-sm-12 col-xs-12 no-left-right-padding" id="reqHeader-panel">    
      <div class="panel panel-primary">
        <div class="panel-heading">
          <h3 class="panel-title">Request Headers</h3>
        </div>
        <div class="panel-body">
          <table class="table no-bottom-margin" width="100%">
            <thead>
              <tr>
                <th width="30%">Key</th>
                <th width="50%">Value</th>
                <th width="20%" class="text-center">Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr ng-repeat="item in c.data.headersNew">
                <td width="30%" ng-class="{'bg-edit': item.editingKey}">
                  <span class="full-span" ng-if="!item.editingKey" ng-dblclick="c.startEditing(item, 'key', $event)">{{item.key}}</span>
                  <input class="editable-input" ng-if="item.editingKey" ng-model="item.key" ng-blur="c.doneEditing(item, 'key')" autofocus />
                </td>
                <td width="50%" ng-class="{'bg-edit': item.editingValue}">
                  <span class="full-span" ng-if="!item.editingValue" ng-dblclick="c.startEditing(item, 'value', $event)">{{item.value}}</span>
                  <input class="editable-input" ng-if="item.editingValue" ng-model="item.value" ng-blur="c.doneEditing(item, 'value')"/>
                </td>
                <td width="20%" class="text-center vertical-middle">
                  <a role="button" ng-click="c.removeHeader(item, $index)"><span class="glyphicon glyphicon-trash"></span></a>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="panel-footer">
          <div class="row full-width">
            <div class="col-xs-4"><input type="text" ng-model="c.headerKey" placeholder="Key" class="form-control" aria-label="key" id="inputKey"/></div>
            <div class="col-xs-6"><input type="text" ng-model="c.headerValue" placeholder="Value" class="form-control" aria-label="value" id="inputValue"/></div>
            <div class="col-xs-2 text-center"><button class="btn btn-primary" type="button" ng-click="c.addHeader()"><span class="glyphicon glyphicon-ok"></span></button></div>
          </div>
        </div>
      </div>
    </div>

  </div>

  <div class="row">

    <div class="col-md-6 col-sm-12 col-xs-12" id="request-body">
      <div class="panel panel-primary">
        <div class="panel-heading">
          <h3 class="panel-title">
            Request Body
            <a popover-animation="true" uib-popover="{{c.copyMsg}}" popover-class="pop-class" popover-is-open="c.popoverOpenReq" popover-placement="top-right" ng-click="c.copy(c.data.requestBody.value, 'req')" class="pull-right" role="button"><span class="glyphicon glyphicon-copy"></span></a>
          </h3>
        </div>
        <div class="panel-body no-padding">
          <textarea class="form-control" ng-model="c.data.requestBody.value" ng-if="c.isMobile"></textarea>
          <sp-script-editor id="editor" field="c.data.requestBody" data-length="4000" sn-disabled="false" sn-widget-scope-js-level="traditional" sn-server-side="false" ng-if="!c.isMobile" />-->
        </div>
      </div>
    </div>

    <div class="col-md-6 col-sm-12 col-xs-12 no-left-right-padding" id="response-text">
      <div class="panel" ng-class="{'panel-primary': c.data.statusFlag==undefined, 'panel-success': c.data.statusFlag==true, 'panel-danger': c.data.statusFlag==false}">
        <div class="panel-heading">
          <h3 class="panel-title">
            Response Body <span ng-if="c.data.httpStatus != undefined"> - {{c.data.httpStatus}}</span>
            <span class="btn-pnl pull-right">
              <a ng-click="c.openJCModal(c.data.responseBody.value)" ng-if="c.data.responseBody.value != '' && c.data.responseBody.value != '{}'" role="button"><span class="glyphicon glyphicon-stats"></span></a>
              <a popover-animation="true" uib-popover="{{c.copyMsg}}" popover-class="pop-class" popover-is-open="c.popoverOpenResp" popover-placement="top-right" ng-click="c.copy(c.data.responseBody.value, 'resp')" role="button"><span class="glyphicon glyphicon-copy"></span></a>
            </span>

          </h3>
        </div>
        <div class="panel-body no-padding">
          <div>
            <sp-script-editor id="editor" field="c.data.responseBody" data-length="4000" class="form-control" sn-disabled="true" sn-widget-scope-js-level="traditional" sn-server-side="false" />
          </div>
        </div>
      </div>
    </div>

  </div>
</div>]]></template>
    </sp_widget>
</record_update>
